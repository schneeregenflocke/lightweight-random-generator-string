name: CMake Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install Qt
      run: |
        pip install aqtinstall==2.0.0rc3
        aqt install-qt --outputdir ${{github.workspace}}/Qt windows desktop 6.1.2 win64_msvc2019_64
        aqt install-tool --outputdir ${{github.workspace}}/Qt windows desktop tools_ifw qt.tools.ifw.41

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DQT_INSTALLATION_PREFIX=${{github.workspace}}/Qt/6.1.2/msvc2019_64 -DCPACK_IFW_ROOT=${{github.workspace}}/Qt/Tools/QtInstallerFramework/4.1

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: CPack
      working-directory: package
      run: |
        dir ..
        cpack --config ../CPackConfig.cmake -V
        mkdir package2
        cd package2
        dir ..\..

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: installer
        path: package/*.exe
